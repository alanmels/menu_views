<?php

/**
 * @file
 *  Module to enable adding a view menu item.
 *
 *  This allows an admin to select a view for a menu item instead of a title and link. When
 *  the link is rendered, the view is inserted instead of the link. In addition, if the
 *  parent item of the menu is a node page, the node id is passed to the view as an argument
 *
 *  Written by Randall Knutson & Mark Carver - LevelTen Interactive - http://www.leveltendesign.com
 */

/**
 * Implements hook_menu().
 * Fake callback, needed for menu item add/edit validation.
 */
function menu_views_menu() {
  return array(
    '<view>' => array(
      'page callback' => 'drupal_not_found',
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    ),
  );
}

/**
 * Override theme_link().
 * Render a view inside a link (only menu items will have them, though).
 */
function menu_views_link($variables) {
  $output = '';
  $options = $variables['options'];
  $menu_views = isset($options['menu_views']) ? $options['menu_views'] : FALSE;
  if ($menu_views) {
    $view_name = isset($menu_views['name']) ? $menu_views['name'] : FALSE;
    $view_display = isset($menu_views['display']) ? $menu_views['display'] : FALSE;
    $view_arguments = isset($menu_views['arguments']) ? $menu_views['arguments'] : FALSE;
    if ($view_name && $view_display) {
      $link = '';
      if ($variables['path'] != '<view>') {
        $link = '<a href="' . check_plain(url($variables['path'], $variables['options'])) . '"' . drupal_attributes($variables['options']['attributes']) . '>' . ($variables['options']['html'] ? $variables['text'] : check_plain($variables['text'])) . '</a>';
      }
      // Process arguments
      if ($view_arguments) {
        $view_arguments = _menu_views_filter_arguments($menu_views);
      }
      else {
        $view_arguments = array();
      }
      // Process the view
      $view_output = '';
      $view = views_get_view($view_name);
      if ($view && $view->access($view_display)) {
        $view_output = $view->preview($view_display, $view_arguments);
      }
      if (!empty($view)) {
        return $link . $view_output;
      }
    }
  }
  // Call the original theme function for link.
  return theme('menu_views_link_default', $variables);
}

/**
 * Filters arguments and tokens for view argument.
 * Render a view inside a menu link.
 */
function _menu_views_filter_arguments($menu_views) {
  $args = explode('/', $menu_views['arguments']);
  $nid = '[NULL]';
  if (isset($menu_views['mlid']) && $menu_views['mlid']) {
    $node = menu_link_load($menu_views['mlid']);
    $node = menu_get_object('node', 1, $node['link_path']);
    if (is_object($node) && $node->nid) {
      $nid = $node->nid;
    }
  }
  $pnid = '[NULL]';
  if (isset($menu_views['plid']) && $menu_views['plid']) {
    $parent = menu_link_load($menu_views['plid']);
    $parent = menu_get_object('node', 1, $parent['link_path']);
    if (is_object($parent) && $parent->nid) {
      $pnid = $parent->nid;
    }
  }
  foreach ($args as $key => $arg) {
    $arg = str_replace(array('%n', '%N', '%nid'), '!nid', $arg);
    $arg = str_replace(array('%p', '%P', '%pnid'), '!pnid', $arg);
    $args[$key] = t($arg, array('!nid' => $nid, '!pnid' => $pnid));
  }
  return $args;
}

/**
 * Implements hook_theme_registry_alter().
 * Intercept hook_link().
 */
function menu_views_theme_registry_alter(&$registry) {
  // Save previous value from registry in case another module/theme overwrites link
  $registry['menu_views_link_default'] = $registry['link'];
  $registry['link']['function'] = 'menu_views_link';
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Appends the attached view to the title of the menu item.
 */
function menu_views_form_menu_overview_form_alter(&$form, &$form_state) {
  drupal_add_css(drupal_get_path('module', 'menu_views') . '/menu_views.css', array('group' => CSS_DEFAULT));
  $elements = element_children($form);
  foreach ($elements as $mlid) {
    $element = &$form[$mlid];
    // Only process menu items
    if (isset($element['#item'])) {
      $item = &$element['#item'];
      $options = $item['options'];
      $view_name = '';
      $view_display = '';
      $view_arguments = '';
      if (isset($options['menu_views'])) {
        $view_name = $options['menu_views']['name'];
      }
      // Only change the title for attached views
      if (!empty($view_name)) {
        $view = views_get_view($view_name);
        if (isset($view) && $view->human_name) {
          $view_name = $view->human_name;
          $view_display = $options['menu_views']['display'];
          if (isset($view->display[$view_display])) {
            $view_display = $view->display[$view_display]->display_title;
            $view_arguments = !empty($options['menu_views']['arguments']) ? ' : ' . implode('/', _menu_views_filter_arguments($options['menu_views'])) : '';
            $disabled = $item['hidden'] ? ' (' . t('disabled') . ')' : '';
            $title = '';
            if ($item['link_path'] != '<view>') {
              // Must manually set the HTML here. Don't need the view showing up here by runnging it through l();
              $title = '<a href="' . check_plain(url($item['href'], $item['localized_options'])) . '"' . drupal_attributes($item['localized_options']['attributes']) . '>' . check_plain($item['title']) . '</a> ';
            }
            $element['title']['#markup'] = $title . '<div class="messages status view">Attached view: ( ' . $view_name . ' : ' . $view_display . $view_arguments . ' )</div>' . $disabled;
          }
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Change path description. Insert the views selection.
 */
function menu_views_form_menu_edit_item_alter(&$form, &$form_state) {
  if (isset($form['link_path']['#description'])) {
    $form['link_path']['#description'] .= ' ' . t('Enter %view to disable the link and display only the view.', array('%view' => '<view>'));
  }
  $form['options']['menu_views'] = array(
    '#type' => 'fieldset',
    '#title' => t('Attach view'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#prefix' => '<div id="menu-views">',
    '#suffix' => '</div>',
    '#tree' => TRUE,
  );
  $options = array();
  $views = views_get_enabled_views();
  foreach ($views as $name => $view) {
    $options[$name] = $view->human_name;
  }
  ksort($options);
  $form['options']['menu_views']['name'] = array(
    '#type' => 'select',
    '#title' => t('View'),
    '#empty_option' => t('- None -'),
    '#description' => t('Select a view to attach.'),
    '#default_value' => isset($form['options']['#value']['menu_views']['name']) ? $form['options']['#value']['menu_views']['name'] : '',
    '#options' => $options,
    '#ajax' => array(
      'callback' => 'menu_views_ajax_callback',
      'wrapper' => 'menu-views',
    ),
  );
  $view_name = FALSE;
  // Check the form_state first to see if a view has been set on the form.
  if (isset($form_state['values']['menu_views']['name'])) {
    $view_name = $form_state['values']['menu_views']['name'];
  }
  // Check if this is an existing link with a view default.
  elseif (isset($form['options']['#value']['menu_views']['name'])) {
    $view_name = $form['options']['#value']['menu_views']['name'];
  }
  if ($view_name) {
    $view = views_get_view($view_name);
    $options = array();
    foreach ($view->display as $name => $display) {
      $options[$name] = $display->display_title;
    }
    $form['options']['menu_views']['display'] = array(
      '#type' => 'select',
      '#title' => t('Display'),
      '#description' => t('Select a view display to use.'),
      '#empty_option' => t('- Select a display -'),
      '#default_value' => isset($form['options']['#value']['menu_views']['display']) ? $form['options']['#value']['menu_views']['display'] : '',
      '#options' => $options,
      '#ajax' => array(
        'callback' => 'menu_views_ajax_callback',
        'wrapper' => 'menu-views',
      ),
    );
  }
  $view_display = FALSE;
  // Check the form_state first to see if a view has been set on the form.
  if (isset($form_state['values']['menu_views']['display'])) {
    $view_display = $form_state['values']['menu_views']['display'];
  }
  // Check if this is an existing link with a view default.
  elseif (isset($form['options']['#value']['menu_views']['display'])) {
    $view_display = $form['options']['#value']['menu_views']['display'];
  }
  if ($view_display) {
    $form['options']['menu_views']['arguments'] = array(
      '#type' => 'textfield',
      '#title' => t('Arguments'),
      '#description' => t('Enter arguments to pass to the view. You may pass %n for the nid of the link path. You may pass %p for the nid of the parent link path. Separate arguments with /.', array('%n' => '%N', '%p' => '%P')),
      '#default_value' => isset($form['options']['#value']['menu_views']['arguments']) ? $form['options']['#value']['menu_views']['arguments'] : '',
    );
  }
  // Inject handlers
  $form['#validate'] = array_merge(array('menu_views_menu_edit_item_validate'), $form['#validate']);
  $form['#submit'] = array_merge(array('menu_views_menu_edit_item_submit'), $form['#submit']);
}

/**
 * Ajax callback for re-rendering the attach views portion of the form.
 */
function menu_views_ajax_callback($form, $form_state) {
  return $form['options']['menu_views'];
}

/**
 * Validate handler for menu_edit_item form
 */
function menu_views_menu_edit_item_validate($form, &$form_state) {
  // Only run this validation when the form is fully submitted.
  if ($form_state['submitted']) {
    if ($form_state['values']['link_path'] == '<view>' && $form_state['values']['menu_views']['name'] == '') {
      form_set_error('menu_views][name', t('The link path has been set to %view. You must select a view to attach to this menu item.', array('%view' => '<view>')));
    }
  }
}

/**
 * Submit handler for menu_edit_item form
 */
function menu_views_menu_edit_item_submit($form, &$form_state) {
  // Save menu_views values in the links options.
  $form_state['values']['menu_views']['mlid'] = $form_state['values']['original_item']['mlid'];
  $form_state['values']['menu_views']['plid'] = $form_state['values']['original_item']['plid'];
  $form_state['values']['options']['menu_views'] = $form_state['values']['menu_views'];
  unset($form_state['values']['menu_views']);
}
